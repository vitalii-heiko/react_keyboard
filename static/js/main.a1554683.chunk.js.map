{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","handler","event","setState","code","key","document","addEventListener","this","removeEventListener","className","React","Component","ReactDOM","render","getElementById"],"mappings":"oNAMMA,E,4MACJC,MAAyB,CACvBC,WAAY,I,EAWdC,QAAU,SAACC,GACT,EAAKC,SAAS,CACZH,WAA2B,UAAfE,EAAME,KACd,QACAF,EAAMG,O,uDAZd,WACEC,SAASC,iBAAiB,QAASC,KAAKP,W,kCAG1C,WACEK,SAASG,oBAAoB,QAASD,KAAKP,W,oBAW7C,WACE,IAAQD,EAAeQ,KAAKT,MAApBC,WAER,OACE,qBAAKU,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACGV,EAAU,mCACqBA,EADrB,KAEP,kC,GA7BIW,IAAMC,WAoCTd,I,MCrCfe,IAASC,OACP,cAAC,EAAD,IACAR,SAASS,eAAe,W","file":"static/js/main.a1554683.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  pressedKey: string,\n};\n\nclass App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    pressedKey: '',\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handler);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handler);\n  }\n\n  handler = (event: KeyboardEvent) => {\n    this.setState({\n      pressedKey: event.code === 'Space'\n        ? 'Space'\n        : event.key,\n    });\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {pressedKey\n            ? `The last pressed key is [${pressedKey}]`\n            : 'Nothing was pressed yet'}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}